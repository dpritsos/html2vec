{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"to",
				"toarray"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/html2vect/base/vectortypes/string2tf.py",
			"settings":
			{
				"buffer_size": 4812,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/html2vect/base/io/basefilehandlers.py",
			"settings":
			{
				"buffer_size": 4463,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#\n#    Module: html2terms\n# \n#    Author: Dimitiros Pritsos \n#    \n#    License: BSD Style\n#\n#    Last update: Please refer to the GIT tracking \n# \n\n\"\"\" html2vect.base.html2terms: submodule of `html2vect` module defines the classes: BaseHtml2TF\"\"\"\n\nimport abc\nimport warnings\nfrom ..base.features.html2attrib import BaseHTML2Attributes\nfrom ..base.vectortypes.string2tf import BaseString2TF\nfrom ..base.io.basefilehandlers import BaseFileHandler\nfrom ..base.convert.tfdtools import TFDictTools\n\n\nclass BaseHtml2TF(BaseFileHandler):\n    __metaclass__ = abc.ABCMeta\n\n    #Term Frequency Dictionary Tools Class\n    tfdtools = TFDictTools()\n    \n    \n    def __init__(self, n, attrib, lowercase, valid_html):\n        \n        #Initialise BaseFileHandler Class\n        super(BaseHtml2TF, self).__init__()   \n        \n        #HTML to attributes Class\n        self.h2attr = BaseHTML2Attributes( valid_html )\n        \n        #Initialised the TermsType to be produced from this class stored in as class attribute \n        self.__class__.s2ngl.reset_N(n)\n        \n        #String to Term Frequency Class using  \n        self.s2tf = BaseString2TF( self.__class__.s2ngl )    \n        \n        if attrib == \"text\":\n            self.attrib__ = self.h2attr.text\n        elif attrib == \"tags\":\n            self.attrib__ = self.s2tf.tags\n                        \n        if lowercase:\n            self._attrib = self._lower( self.__attrib )    \n   \n    \n    def _lower(self, methd):\n        \n        def lowerCase(*args, **kwrgs):\n            return methd(*args, **kwrgs).lower()\n        \n        return lowerCase\n    \n    \n    def build_vocabulary(self,xhtml_file_l, encoding, error_handling):\n         \n        #The TF Dictionary \n        tf_d = dict()\n        #Merge All Term-Frequency Dictionaries created by the Raw Texts\n        for html_str in self.load_files(xhtml_file_l, encoding, error_handling):\n            tf_d = self.__class__.tfdtools.merge_tfds( tf_d, self.s2tf.tf_dict( self._attrib( html_str ) ) )\n            \n        #Create The Terms-Index Vocabulary that is shorted by Frequency descending order\n        tid_vocabulary = self.__class__.tfdtools.tf2tidx( tf_d )\n        \n        return tid_vocabulary\n    \n    \n    def __build_vocabulary(self,*args, **kwrgs):\n        \n        #Warn me that a Vocabulary is automaticaly buildined  \n        warnings.warn(\"Automated Vocabulary Building has been triggered: NONE tid_vocabulary was given as argument\")\n        \n        #Build and return the Vocabulary\n        return elf.build_vocabulary(*args, **kwrgs)\n        \n        \n    @abc.abstractmethod        \n    def yield_(self, xhtml_str, tid_vocabulary): \n        #The main method that will produce the Term-Frequency or Frequency Dictionaries/Lists\n        pass\n    \n     \n    @abc.abstractmethod    \n    def from_src(self, xhtml_str, tid_vocabulary=None):\n        pass\n\n\n    @abc.abstractmethod    \n    def from_files(self, xhtml_file_l, tid_vocabulary=None, encoding='utf8', error_handling='strict'):\n        pass\n\n    \n    @abc.abstractmethod    \n    def from_paths(self, basepath, filepath_l, tid_vocabulary=None, encoding='utf8', error_handling='strict'):\n       pass\n            \n\n        \n        \n\n    ",
			"file": "src/html2vect/base/html2terms.py",
			"file_size": 3210,
			"file_write_time": 1366099117000000,
			"settings":
			{
				"buffer_size": 3213,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/html2vect/sparse/cngrams.py",
			"settings":
			{
				"buffer_size": 2638,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 348.0,
		"selected_items":
		[
		],
		"width": 392.0
	},
	"console":
	{
		"height": 139.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/dimitrios/Development_Workspace/html2vectors/src/html2vect/sparse/cnlowbow.py",
		"/home/dimitrios/Development_Workspace/html2vectors/src/html2vect/dict/cngrams.py",
		"/home/dimitrios/Development_Workspace/webgenreidentification/src/crossval_experiments_Koppels_method.py",
		"/home/dimitrios/Development_Workspace/webgenreidentification/src/crossval_experiments_RF.py",
		"/home/dimitrios/Development_Workspace/webgenreidentification/webgenreidentification.sublime-project",
		"/home/dimitrios/Development_Workspace/webgenreidentification/src/Author_Attribution_lowbow.py",
		"/home/dimitrios/Development_Workspace/webgenreidentification/src/crossval_experiments_lowbow_multiclass.py",
		"/home/dimitrios/Development_Workspace/webgenreidentification/src/crossval_experiments_OC-SVM.py"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/html2vect/base/vectortypes/string2tf.py",
					"settings":
					{
						"buffer_size": 4812,
						"regions":
						{
						},
						"selection":
						[
							[
								4529,
								4529
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1444.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/html2vect/base/io/basefilehandlers.py",
					"settings":
					{
						"buffer_size": 4463,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/html2vect/base/html2terms.py",
					"settings":
					{
						"buffer_size": 3213,
						"regions":
						{
						},
						"selection":
						[
							[
								1313,
								1313
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/html2vect/sparse/cngrams.py",
					"settings":
					{
						"buffer_size": 2638,
						"regions":
						{
						},
						"selection":
						[
							[
								1161,
								1161
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 303.0
	},
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"",
				"crossval_experiments_RF.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"/home/dimitrios/Development_Workspace/webgenreidentification/webgenreidentification.sublime-project"
			]
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 224.0,
	"status_bar_visible": true
}
